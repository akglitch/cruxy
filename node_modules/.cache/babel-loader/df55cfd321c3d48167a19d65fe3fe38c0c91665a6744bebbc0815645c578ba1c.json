{"ast":null,"code":"import { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $cKEhs$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  let {\n    inputProps: inputProps\n  } = $cKEhs$useToggle(props, state, inputRef);\n  let {\n    isSelected: isSelected\n  } = state;\n  let {\n    isIndeterminate: isIndeterminate\n  } = props;\n  $cKEhs$useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\nconst $1ae600c947479353$export$31440636951aa68c = new WeakMap();\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  let {\n    isDisabled: isDisabled,\n    name: name\n  } = props;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $cKEhs$useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  let domProps = $cKEhs$filterDOMProps(props, {\n    labelable: true\n  });\n  // Pass name prop from group to all items by attaching to the state.\n  $1ae600c947479353$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $cKEhs$mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps: labelProps\n  };\n}\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  const toggleState = $cKEhs$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n  let {\n    inputProps: inputProps\n  } = $406796ff087fe49b$export$e375f10ce42261c5({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n  }, toggleState, inputRef);\n  return {\n    inputProps: inputProps\n  };\n}\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"mappings":";;;;;SA8BgBA,yCAAW,CAACC,KAAwB,EAAEC,KAAkB,EAAEC,QAAqC,EAAgB;EAC7H,IAAI;IAACC;EAAU,CAAC,GAAGC,gBAAS,CAACJ,KAAK,EAAEC,KAAK,EAAEC,QAAQ;EACnD,IAAI;IAACG;EAAU,CAAC,GAAGJ,KAAK;EAExB,IAAI;IAACK;EAAe,CAAC,GAAGN,KAAK;EAC7BO,gBAAS,OAAO;IACd;IACA;IACA,IAAIL,QAAQ,CAACM,OAAO,EAClBN,QAAQ,CAACM,OAAO,CAACC,aAAa,GAAGH,eAAe;EAEpD,CAAC;EAED,OAAO;IACLH,UAAU,EAAE;SACPA,UAAU;MACbO,OAAO,EAAEL,UAAU;MACnB,cAAc,EAAEC,eAAe,GAAG,OAAO,GAAGD;IAC9C;EACF,CAAC;AACH;ACpCO,MAAMM,yCAAkB,GAAG,IAAIC,OAAO;SCkB7BC,yCAAgB,CAACb,KAA6B,EAAEC,KAAyB,EAAqB;EAC5G,IAAI;IAACa,sBAAU;IAAAC,MAAEA;EAAI,CAAC,GAAGf,KAAK;EAE9B,IAAI;IAACgB,sBAAU;IAAAC,YAAEA;EAAU,CAAC,GAAGC,eAAQ,CAAC;OACnClB,KAAK;IACR;IACA;IACAmB,gBAAgB,EAAE;EACpB,CAAC;EAED,IAAIC,QAAQ,GAAGC,qBAAc,CAACrB,KAAK,EAAE;IAACsB,SAAS,EAAE;EAAI,CAAC;EAEtD;EACAX,yCAAkB,CAACY,GAAG,CAACtB,KAAK,EAAEc,IAAI;EAElC,OAAO;IACLS,UAAU,EAAEC,iBAAU,CAACL,QAAQ,EAAE;MAC/BM,IAAI,EAAE,OAAO;MACb,eAAe,EAAEZ,UAAU,IAAIa,SAAS;SACrCV;IACL,CAAC;gBACDD;EACF,CAAC;AACH;SC7BgBY,yCAAoB,CAAC5B,KAAiC,EAAEC,KAAyB,EAAEC,QAAqC,EAAgB;EACtJ,MAAM2B,WAAW,GAAGC,qBAAc,CAAC;IACjCC,UAAU,EAAE/B,KAAK,CAAC+B,UAAU,IAAI9B,KAAK,CAAC8B,UAAU;IAChD1B,UAAU,EAAEJ,KAAK,CAACI,UAAU,CAACL,KAAK,CAACgC,KAAK;IACxCC,QAAQ,CAAC5B,UAAU,EAAE;MACnB,IAAIA,UAAU,EACZJ,KAAK,CAACiC,QAAQ,CAAClC,KAAK,CAACgC,KAAK,OAE1B/B,KAAK,CAACkC,WAAW,CAACnC,KAAK,CAACgC,KAAK;MAG/B,IAAIhC,KAAK,CAACiC,QAAQ,EAChBjC,KAAK,CAACiC,QAAQ,CAAC5B,UAAU;IAE7B;EACF,CAAC;EAED,IAAI;IAACF;EAAU,CAAC,GAAGJ,yCAAW,CAAC;OAC1BC,KAAK;IACR+B,UAAU,EAAE/B,KAAK,CAAC+B,UAAU,IAAI9B,KAAK,CAAC8B,UAAU;IAChDjB,UAAU,EAAEd,KAAK,CAACc,UAAU,IAAIb,KAAK,CAACa,UAAU;IAChDC,IAAI,EAAEf,KAAK,CAACe,IAAI,IAAIJ,yCAAkB,CAACyB,GAAG,CAACnC,KAAK;EAClD,CAAC,EAAE4B,WAAW,EAAE3B,QAAQ;EAExB,OAAO;gBAACC;EAAU,CAAC;AACrB","names":["$406796ff087fe49b$export$e375f10ce42261c5","props","state","inputRef","inputProps","$cKEhs$useToggle","isSelected","isIndeterminate","$cKEhs$useEffect","current","indeterminate","checked","$1ae600c947479353$export$31440636951aa68c","WeakMap","$1e9fce0cfacc738b$export$49ff6f28c54f1cbe","isDisabled","name","labelProps","fieldProps","$cKEhs$useLabel","labelElementType","domProps","$cKEhs$filterDOMProps","labelable","set","groupProps","$cKEhs$mergeProps","role","undefined","$fba3e38d5ca8983f$export$353b32fc6898d37d","toggleState","$cKEhs$useToggleState","isReadOnly","value","onChange","addValue","removeValue","get"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/utils.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroup.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}