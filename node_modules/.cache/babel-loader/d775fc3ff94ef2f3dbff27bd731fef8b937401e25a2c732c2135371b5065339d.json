{"ast":null,"code":"import { useMemo as $1OoTj$useMemo, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\nclass $05ca4cd7c4a5a999$export$863faf230ee2118a {\n  *[tmp]() {\n    yield* this.iterable;\n  }\n  get size() {\n    return this.keyMap.size;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    return this.firstKey;\n  }\n  getLastKey() {\n    return this.lastKey;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes) {\n    let {\n      expandedKeys: expandedKeys\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n    };\n    for (let node2 of nodes) visit(node2);\n    let last;\n    let index = 0;\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n      if (node1.type === 'item') node1.index = index++;\n      last = node1;\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n}\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  let [expandedKeys, setExpandedKeys] = $1OoTj$useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);\n  let selectionState = $1OoTj$useMultipleSelectionState(props);\n  let disabledKeys = $1OoTj$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let tree = $1OoTj$useCollection(props, nodes => new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {\n    expandedKeys: expandedKeys\n  }), null, [expandedKeys]);\n  // Reset focused key if that item is deleted from the collection.\n  $1OoTj$useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n  let onToggle = key => {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new $1OoTj$SelectionManager(tree, selectionState)\n  };\n}\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  let res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"mappings":"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","names":["Symbol","iterator","$05ca4cd7c4a5a999$export$863faf230ee2118a","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","nodes","expandedKeys","Map","Set","visit","set","childNodes","type","has","child","node2","last","index","node1","undefined","$875d6693e12af071$export$728d6ba534403756","props","setExpandedKeys","$1OoTj$useControlledState","defaultExpandedKeys","onExpandedChange","selectionState","$1OoTj$useMultipleSelectionState","disabledKeys","$1OoTj$useMemo","tree","$1OoTj$useCollection","$1OoTj$useEffect","focusedKey","setFocusedKey","onToggle","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$1OoTj$SelectionManager","res","delete","add"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/TreeCollection.ts","/home/kaytee/Desktop/crux/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/useTreeState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}