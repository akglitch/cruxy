{"ast":null,"code":"import { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\nclass $c74cda7d31af1253$export$c84671f46d6a1ca {\n  /**\n  * Returns whether the layout should invalidate in response to\n  * visible rectangle changes. By default, it only invalidates\n  * when the collection view's size changes. Return true always\n  * to make the layout invalidate while scrolling (e.g. sticky headers).\n  */\n  shouldInvalidate(newRect, oldRect) {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n  }\n  /**\n  * This method allows the layout to perform any pre-computation\n  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n  * Called by the collection view before {@link getVisibleLayoutInfos}\n  * or {@link getLayoutInfo} are called.\n  */\n  validate(invalidationContext) {}\n  /**\n  * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n  * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n  * @param point The point at which the drag occurred.\n  */ // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n  /**\n  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n  * to reject the drop. The dropped items will be inserted before the resulting target.\n  * @param point The point at which the drop occurred.\n  */ // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n  /**\n  * Returns the starting attributes for an animated insertion.\n  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n  * The default implementation just returns its input.\n  *\n  * @param layoutInfo The proposed LayoutInfo for this view.\n  */\n  getInitialLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n  /**\n  * Returns the ending attributes for an animated removal.\n  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n  * to the one returned by this method. The default implementation returns its input.\n  *\n  * @param layoutInfo The original LayoutInfo for this view.\n  */\n  getFinalLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n}\nclass $d7fd61009c21d0bb$export$7e0eeb9da702a085 {\n  /**\n  * Returns a copy of the LayoutInfo.\n  */\n  copy() {\n    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n  /**\n  * @param type A string representing the view type. Should be `'item'` for item views.\n                          Other types are used by supplementary views.\n  * @param key The unique key for this view.\n  * @param rect The rectangle describing the size and position of this view.\n  */\n  constructor(type, key, rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n}\nclass $3041db3296945e6e$export$baf26146a414f24a {\n  /**\n  * Returns a copy of this point.\n  */\n  copy() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n  }\n  /**\n  * Checks if two points are equal.\n  */\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  /**\n  * Returns true if this point is the origin.\n  */\n  isOrigin() {\n    return this.x === 0 && this.y === 0;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = x;\n    this.y = y;\n  }\n}\nclass $60423f92c7f9ad87$export$c79fc6492f3af13d {\n  /**\n  * The maximum x-coordinate in the rectangle.\n  */\n  get maxX() {\n    return this.x + this.width;\n  }\n  /**\n  * The maximum y-coordinate in the rectangle.\n  */\n  get maxY() {\n    return this.y + this.height;\n  }\n  /**\n  * The area of the rectangle.\n  */\n  get area() {\n    return this.width * this.height;\n  }\n  /**\n  * The top left corner of the rectangle.\n  */\n  get topLeft() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n  }\n  /**\n  * The top right corner of the rectangle.\n  */\n  get topRight() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.y);\n  }\n  /**\n  * The bottom left corner of the rectangle.\n  */\n  get bottomLeft() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.maxY);\n  }\n  /**\n  * The bottom right corner of the rectangle.\n  */\n  get bottomRight() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.maxY);\n  }\n  /**\n  * Returns whether this rectangle intersects another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  intersects(rect) {\n    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n  }\n  /**\n  * Returns whether this rectangle fully contains another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  containsRect(rect) {\n    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n  }\n  /**\n  * Returns whether the rectangle contains the given point.\n  * @param point - The point to check.\n  */\n  containsPoint(point) {\n    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n  }\n  /**\n  * Returns the first corner of this rectangle (from top to bottom, left to right)\n  * that is contained in the given rectangle, or null of the rectangles do not intersect.\n  * @param rect - The rectangle to check.\n  */\n  getCornerInRect(rect) {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) return key;\n    }\n    return null;\n  }\n  equals(rect) {\n    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  }\n  pointEquals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  sizeEquals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n  /**\n  * Returns a copy of this rectangle.\n  */\n  copy() {\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\nclass $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {\n  /**\n  * Returns a copy of this size.\n  */\n  copy() {\n    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n  }\n  /**\n  * Returns whether this size is equal to another one.\n  */\n  equals(other) {\n    return this.width === other.width && this.height === other.height;\n  }\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.width = width;\n    this.height = height;\n  }\n}\nlet $ad1d98aa8f0c31b4$var$KEY = 0;\nclass $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  /**\n  * Prepares the view for reuse. Called just before the view is removed from the DOM.\n  */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n  constructor(virtualizer) {\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n}\n\n// use high res timer if available\nlet $3eb131dcf37ad5f8$var$perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nlet $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nlet $3eb131dcf37ad5f8$var$fixTs;\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  let canceled = false;\n  let raf_id;\n  let promise = new Promise(resolve => {\n    let start = $3eb131dcf37ad5f8$var$getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1000000000000 !== $3eb131dcf37ad5f8$var$getTime() > 1000000000000;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new $3041db3296945e6e$export$baf26146a414f24a(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n  return promise;\n}\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  let res = new Set();\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  let toUpdate = new Set();\n  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction* $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n    iterators[_key] = arguments[_key];\n  }\n  for (let iterator of iterators) yield* iterator;\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  let res = {};\n  for (let key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  for (let key of a) {\n    if (!b.has(key)) return false;\n  }\n  return true;\n}\nclass $364191b3decf3697$var$RollingAverage {\n  addSample(sample) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n  constructor() {\n    this.count = 0;\n    this.value = 0;\n  }\n}\nclass $364191b3decf3697$export$4455ee6afb38dcbb {\n  setVisibleRect(rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n    }\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) this.averagePerf.addSample(time);\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n      this.overscanY.addSample(o);\n    }\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n      this.overscanX.addSample(o);\n    }\n  }\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n    return overscanned;\n  }\n  constructor() {\n    this.startTime = 0;\n    this.averagePerf = new $364191b3decf3697$var$RollingAverage();\n    this.averageTime = new $364191b3decf3697$var$RollingAverage();\n    this.velocity = new $3041db3296945e6e$export$baf26146a414f24a(5, 5);\n    this.overscanX = new $364191b3decf3697$var$RollingAverage();\n    this.overscanY = new $364191b3decf3697$var$RollingAverage();\n    this.visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();\n  }\n}\nclass $8e135e531d8dcb66$export$febc5573c75cefb0 {\n  constructor() {\n    this.level = 0;\n    this.actions = [];\n    this.animated = true;\n    this.initialMap = new Map();\n    this.finalMap = new Map();\n    this.initialLayoutInfo = new Map();\n    this.finalLayoutInfo = new Map();\n    this.removed = new Map();\n    this.toRemove = new Map();\n  }\n}\nclass $38b9490c1cca8fc4$export$89be5a243e59c4b2 {\n  _setContentSize(size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n  _setContentOffset(offset) {\n    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n  /**\n  * Get the size of the scrollable content.\n  */\n  get contentSize() {\n    return this._contentSize;\n  }\n  /**\n  * Get the collection view's currently visible rectangle.\n  */\n  get visibleRect() {\n    return this._visibleRect;\n  }\n  /**\n  * Set the collection view's currently visible rectangle.\n  */\n  set visibleRect(rect) {\n    this._setVisibleRect(rect);\n  }\n  _setVisibleRect(rect) {\n    let forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let current = this._visibleRect;\n    // Ignore if the rects are equal\n    if (rect.equals(current)) return;\n    if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n    if (shouldInvalidate) this.relayout({\n      offsetChanged: !rect.pointEquals(current),\n      sizeChanged: !rect.sizeEquals(current)\n    });else this.updateSubviews(forceUpdate);\n  }\n  get collection() {\n    return this._collection;\n  }\n  set collection(data) {\n    this._setData(data);\n  }\n  _setData(data) {\n    if (data === this._collection) return;\n    if (this._collection) this._runTransaction(() => {\n      this._collection = data;\n    }, this.transitionDuration > 0);else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n  /**\n  * Reloads the data from the data source and relayouts the collection view.\n  * Does not animate any changes. Equivalent to re-assigning the same data source\n  * to the collection view.\n  */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n  /**\n  * Returns the item with the given key.\n  */\n  getItem(key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys() {\n    return this._persistedKeys;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys) {\n    if (!$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) return true;\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) while (k != null) {\n      let layoutInfo = this.layout.getLayoutInfo(k);\n      if (!layoutInfo) break;\n      k = layoutInfo.parentKey;\n      if (k === key) return true;\n    }\n    return false;\n  }\n  /**\n  * Get the collection view's layout.\n  */\n  get layout() {\n    return this._layout;\n  }\n  /**\n  * Set the collection view's layout.\n  */\n  set layout(layout) {\n    this.setLayout(layout);\n  }\n  /**\n  * Sets the collection view's layout, optionally with an animated transition\n  * from the current layout to the new layout.\n  * @param layout The layout to switch to.\n  * @param animated Whether to animate the layout change.\n  */\n  setLayout(layout) {\n    let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (layout === this._layout) return;\n    let applyLayout = () => {\n      if (this._layout)\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n    if (animated)\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n  _getReuseType(layoutInfo, content) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {\n        type: type,\n        reuseType: reuseType\n      };\n    }\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n  getReusableView(layoutInfo) {\n    let content = this.getItem(layoutInfo.key);\n    let {\n      reuseType: reuseType\n    } = this._getReuseType(layoutInfo, content);\n    if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0 ? reusable.pop() : new $ad1d98aa8f0c31b4$export$1a5223887c560441(this);\n    view.viewType = reuseType;\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n    view.layoutInfo = layoutInfo;\n    this._renderView(view);\n    return view;\n  }\n  _renderView(reusableView) {\n    let {\n      type: type,\n      key: key\n    } = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n  _renderContent(type, content) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) return cached;\n    let rendered = this.delegate.renderView(type, content);\n    if (content) this._renderedContent.set(content, rendered);\n    return rendered;\n  }\n  /**\n  * Returns an array of all currently visible views, including both\n  * item views and supplementary views.\n  */\n  get visibleViews() {\n    return Array.from(this._visibleViews.values());\n  }\n  /**\n  * Gets the visible view for the given type and key. Returns null if\n  * the view is not currently visible.\n  *\n  * @param key The key of the view to retrieve.\n  */\n  getView(key) {\n    return this._visibleViews.get(key) || null;\n  }\n  /**\n  * Returns an array of visible views matching the given type.\n  * @param type The view type to find.\n  */\n  getViewsOfType(type) {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n  /**\n  * Returns the key for the given view. Returns null\n  * if the view is not currently visible.\n  */\n  keyForView(view) {\n    if (view && view.layoutInfo) return view.layoutInfo.key;\n    return null;\n  }\n  /**\n  * Returns the key for the item view currently at the given point.\n  */\n  keyAtPoint(point) {\n    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n    }\n    return null;\n  }\n  /**\n  * Cleanup for when the Virtualizer will be unmounted.\n  */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n  /**\n  * Triggers a layout invalidation, and updates the visible subviews.\n  */\n  relayout() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') return;\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n  /**\n  * Performs a relayout immediately. Prefer {@link relayout} over this method\n  * where possible, since it coalesces multiple layout passes in the same tick.\n  */\n  relayoutNow() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {\n        ...this._invalidationContext,\n        ...context\n      };\n    }\n    // Reset the invalidation context\n    this._invalidationContext = null;\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) return;\n    let scrollAnchor = this._getScrollAnchor();\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') context.beforeLayout();\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') context.afterLayout();\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(contentOffsetX, contentOffsetY));\n    } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n      let done = () => {\n        this._disableTransitions();\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {\n            x: x,\n            y: y\n          } = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(x, y));\n        }\n        if (typeof context.afterAnimation === 'function') context.afterAnimation();\n      };\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') context.afterAnimation();\n  }\n  /**\n  * Corrects DOM order of visible views to match item order of collection.\n  */\n  _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) return;\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n  _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n  _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n  _getScrollAnchor() {\n    if (!this.anchorScrollPosition) return null;\n    let visibleRect = this.getVisibleRect();\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {\n            key: key,\n            layoutInfo: layoutInfo,\n            corner: corner,\n            offset: offset\n          };\n        }\n      }\n    }\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor = null;\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || offset < cornerAnchor.offset) cornerAnchor = {\n            key: key,\n            layoutInfo: layoutInfo,\n            corner: corner,\n            offset: offset\n          };\n        }\n      }\n    }\n    return cornerAnchor;\n  }\n  _restoreScrollAnchor(scrollAnchor, context) {\n    let contentOffset = this.getVisibleRect();\n    if (scrollAnchor) {\n      var ref;\n      let finalAnchor = ((ref = context.transaction) === null || ref === void 0 ? void 0 : ref.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n      if (finalAnchor) {\n        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n    return contentOffset;\n  }\n  getVisibleRect() {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, v.width, v.height);\n  }\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n  _getLayoutInfoMap(rect) {\n    let copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map();\n    for (let layoutInfo of layoutInfos) {\n      if (copy) layoutInfo = layoutInfo.copy();\n      map.set(layoutInfo.key, layoutInfo);\n    }\n    return map;\n  }\n  updateSubviews() {\n    let forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this._collection) return;\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({\n        toAdd: toAdd,\n        toRemove: toRemove,\n        toUpdate: toUpdate\n      } = $fc36f9a046a9ce79$export$acaf96a27438246b(currentlyVisible, visibleLayoutInfos));\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) continue;\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) toUpdate.delete(key);else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {\n            reuseType: reuseType\n          } = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) this._applyLayoutInfos();\n        return;\n      }\n    }\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set();\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) this._transaction.toRemove.set(key, view);else this.reuseView(view);\n      }\n    }\n    for (let key1 of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key1);\n      let view;\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key1)) layoutInfo = this._transaction.initialLayoutInfo.get(key1);\n        view = this._transaction.toRemove.get(key1);\n        if (view) {\n          this._transaction.toRemove.delete(key1);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) this._children.add(view);\n      }\n      this._visibleViews.set(key1, view);\n      removed.delete(view);\n    }\n    for (let key2 of toUpdate) {\n      let view = currentlyVisible.get(key2);\n      this._renderedContent.delete(key2);\n      this._renderView(view);\n    }\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) this.removeViews(removed);\n    this._correctItemOrder();\n    this._flushVisibleViews();\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) requestAnimationFrame(() => {\n      // If we're in a transaction, apply animations to visible views\n      // and \"to be removed\" views, which animate off screen.\n      if (this._transaction) requestAnimationFrame(() => this._applyLayoutInfos());\n    });\n    return hasLayoutUpdates;\n  }\n  afterRender() {\n    if (this.shouldOverscan) this._overscanManager.collectMetrics();\n  }\n  _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view1 of this._children) {\n      var ref, ref1, ref2, ref3, ref4;\n      if (((ref = view1.layoutInfo) === null || ref === void 0 ? void 0 : ref.parentKey) != null && !viewsByParentKey.has(view1.layoutInfo.parentKey)) viewsByParentKey.set(view1.layoutInfo.parentKey, []);\n      (ref2 = viewsByParentKey.get((ref1 = view1.layoutInfo) === null || ref1 === void 0 ? void 0 : ref1.parentKey)) === null || ref2 === void 0 ? void 0 : ref2.push(view1);\n      if (!viewsByParentKey.has((ref3 = view1.layoutInfo) === null || ref3 === void 0 ? void 0 : ref3.key)) viewsByParentKey.set((ref4 = view1.layoutInfo) === null || ref4 === void 0 ? void 0 : ref4.key, []);\n    }\n    let buildTree = (parent, views) => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(parent, view, children, childViews => buildTree(view, childViews));\n    });\n    let children1 = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children1);\n  }\n  _applyLayoutInfo(view, layoutInfo) {\n    if (view.layoutInfo === layoutInfo) return false;\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n  _applyLayoutInfos() {\n    let updated = false;\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n      }\n    }\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n        }\n      }\n      for (let view2 of this._transaction.removed.values()) {\n        let cur = view2.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view2, layoutInfo)) updated = true;\n      }\n    }\n    if (updated) this._flushVisibleViews();\n  }\n  _hasLayoutUpdates() {\n    if (!this._transaction) return false;\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) return true;\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n      // Uses equals rather than pointEquals so that width/height changes are taken into account\n      !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n    }\n    return false;\n  }\n  reuseView(view) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n  removeViews(toRemove) {\n    for (let view of toRemove) this._children.delete(view);\n  }\n  updateItemSize(key, size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) return;\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) this.relayout();\n  }\n  startScrolling() {\n    this._isScrolling = true;\n  }\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n  _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n  /**\n  * Scrolls the item with the given key into view, optionally with an animation.\n  * @param key The key of the item to scroll into view.\n  * @param duration The duration of the scroll animation.\n  */\n  scrollToItem(key, options) {\n    // key can be 0, so check if null or undefined\n    if (key == null) return;\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) return;\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n    }\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n    }\n    return this.scrollTo(new $3041db3296945e6e$export$baf26146a414f24a(x, y), duration);\n  }\n  /**\n  * Performs an animated scroll to the given offset.\n  * @param offset - The offset to scroll to.\n  * @param duration The duration of the animation.\n  * @returns A promise that resolves when the animation is complete.\n  */\n  scrollTo(offset1) {\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset1)) {\n      this._setContentOffset(offset1);\n      return Promise.resolve();\n    }\n    this.startScrolling();\n    this._scrollAnimation = $3eb131dcf37ad5f8$export$dc0b63720788090c(this.visibleRect, offset1, duration, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0, offset => {\n      this._setContentOffset(offset);\n    });\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) this.updateItemSize(key, size);\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n    return this._scrollAnimation;\n  }\n  _runTransaction(action, animated) {\n    this._startTransaction();\n    if (this._nextTransaction) this._nextTransaction.actions.push(action);\n    this._endTransaction(animated);\n  }\n  _startTransaction() {\n    if (!this._nextTransaction) this._nextTransaction = new $8e135e531d8dcb66$export$febc5573c75cefb0();\n    this._nextTransaction.level++;\n  }\n  _endTransaction(animated) {\n    if (!this._nextTransaction) return false;\n    // Save whether the transaction should be animated.\n    if (animated != null) this._nextTransaction.animated = animated;\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) return false;\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n    // Default animations to true\n    if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n    this._processTransactionQueue();\n    return true;\n  }\n  _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) return;\n    let next = this._transactionQueue.shift();\n    if (next) this._performTransaction(next);\n  }\n  _getContentRect() {\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n  _performTransaction(transaction) {\n    this._transaction = transaction;\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) action();\n      },\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else this._transaction = null;\n      },\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of $fc36f9a046a9ce79$export$cfc14088dfefce5f(transaction.toRemove.values(), transaction.removed.values())) {\n          this._children.delete(view);\n          this.reuseView(view);\n        }\n        this._transaction = null;\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n        this._processTransactionQueue();\n      }\n    });\n  }\n  _setupTransactionAnimations(transaction) {\n    let {\n      initialMap: initialMap,\n      finalMap: finalMap\n    } = transaction;\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) if (finalMap.has(key))\n      // Store the initial layout info for use during animations.\n      transaction.initialLayoutInfo.set(key, layoutInfo);else\n      // This view was removed. Store the layout info for use\n      // in Layout#getFinalLayoutInfo during animations.\n      transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n    // Get initial layout infos for views that were added\n    for (let [key3, layoutInfo1] of finalMap) if (!initialMap.has(key3)) {\n      let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n      transaction.initialLayoutInfo.set(key3, initialLayoutInfo);\n    }\n    // Figure out which views were removed.\n    for (let [key4, view] of this._visibleViews)\n    // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n    // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n    // added, removed... etc in a loop.\n    if (!finalMap.has(key4) && view.layoutInfo.rect.width > 0) {\n      transaction.removed.set(key4, view);\n      this._visibleViews.delete(key4);\n      // In case something weird happened, where we have a view but no\n      // initial layout info, use the one attached to the view.\n      if (view.layoutInfo) {\n        if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n      }\n    }\n  }\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._contentSize = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec();\n    this._visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new $364191b3decf3697$export$4455ee6afb38dcbb();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n    var _transitionDuration;\n    // Set options from passed object if given\n    this.transitionDuration = (_transitionDuration = options.transitionDuration) !== null && _transitionDuration !== void 0 ? _transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) if (options[key]) this[key] = options[key];\n  }\n}\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  let [visibleViews, setVisibleViews] = $8D3nr$useState([]);\n  let [contentSize, setContentSize] = $8D3nr$useState(new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec());\n  let [isAnimating, setAnimating] = $8D3nr$useState(false);\n  let [isScrolling, setScrolling] = $8D3nr$useState(false);\n  let virtualizer = $8D3nr$useMemo(() => new $38b9490c1cca8fc4$export$89be5a243e59c4b2(), []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  $8D3nr$useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n  // eslint-disable-next-line arrow-body-style\n  $8D3nr$useEffect(() => {\n    return () => virtualizer.willUnmount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    virtualizer: virtualizer,\n    visibleViews: visibleViews,\n    setVisibleRect: $8D3nr$useCallback(rect => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize: contentSize,\n    isAnimating: isAnimating,\n    isScrolling: isScrolling,\n    startScrolling: $8D3nr$useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: $8D3nr$useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"mappings":"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","names":["$c74cda7d31af1253$export$c84671f46d6a1ca","shouldInvalidate","newRect","oldRect","width","height","validate","invalidationContext","getInitialLayoutInfo","layoutInfo","getFinalLayoutInfo","$d7fd61009c21d0bb$export$7e0eeb9da702a085","copy","res","type","key","rect","estimatedSize","opacity","transform","parentKey","isSticky","zIndex","allowOverflow","constructor","$3041db3296945e6e$export$baf26146a414f24a","x","y","equals","point","isOrigin","$60423f92c7f9ad87$export$c79fc6492f3af13d","maxX","maxY","area","topLeft","topRight","bottomLeft","bottomRight","intersects","containsRect","containsPoint","getCornerInRect","pointEquals","sizeEquals","size","$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec","other","$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","prepareForReuse","content","rendered","virtualizer","$3eb131dcf37ad5f8$var$perf","window","performance","$3eb131dcf37ad5f8$var$perfNow","now","webkitNow","msNow","mozNow","$3eb131dcf37ad5f8$var$getTime","bind","Date","getTime","$3eb131dcf37ad5f8$var$fixTs","$3eb131dcf37ad5f8$export$dc0b63720788090c","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","resolve","start","diffX","diffY","requestAnimationFrame","run","t","delta","proceed","cancel","cancelAnimationFrame","$3eb131dcf37ad5f8$export$77860c106b4a6a2e","$3eb131dcf37ad5f8$export$57636bb43b1ccbb0","Math","sin","PI","$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","Set","keys","has","add","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","$fc36f9a046a9ce79$export$cfc14088dfefce5f","iterators","iterator","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","$364191b3decf3697$var$RollingAverage","addSample","sample","count","value","$364191b3decf3697$export$4455ee6afb38dcbb","setVisibleRect","time","startTime","averageTime","visibleRect","velocity","collectMetrics","averagePerf","o","abs","overscanY","overscanX","getOverscannedRect","overscanned","round","min","$8e135e531d8dcb66$export$febc5573c75cefb0","level","actions","animated","initialMap","Map","finalMap","initialLayoutInfo","finalLayoutInfo","removed","$38b9490c1cca8fc4$export$89be5a243e59c4b2","_setContentSize","_contentSize","delegate","setContentSize","_setContentOffset","offset","_visibleRect","contentSize","_setVisibleRect","forceUpdate","current","shouldOverscan","_overscanManager","layout","_resetAnimatedContentOffset","relayout","offsetChanged","sizeChanged","updateSubviews","collection","_collection","data","_setData","_runTransaction","transitionDuration","reloadData","contentChanged","getItem","persistedKeys","_persistedKeys","isPersistedKey","k","getLayoutInfo","_layout","setLayout","applyLayout","_getReuseType","getType","reuseType","getReusableView","_reusableViews","reusable","view","length","pop","viewType","_animatedContentOffset","_renderView","reusableView","_renderContent","cached","_renderedContent","get","renderView","set","visibleViews","Array","from","_visibleViews","values","getView","getViewsOfType","filter","v","keyForView","keyAtPoint","layoutInfos","getVisibleLayoutInfos","willUnmount","_relayoutRaf","context","_scrollAnimation","_invalidationContext","Object","assign","relayoutNow","scrollAnchor","_getScrollAnchor","beforeLayout","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","max","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","done","_disableTransitions","afterAnimation","setTimeout","_correctItemOrder","_isScrolling","_transaction","_visibleLayoutInfos","_children","delete","beginAnimations","endAnimations","anchorScrollPosition","getScrollAnchor","corner","anchorScrollPositionAtTop","cornerAnchor","contentOffset","ref","finalAnchor","adjustment","_getLayoutInfoMap","map","visibleLayoutInfos","currentlyVisible","item","reuseView","key1","_applyLayoutInfo","key2","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","viewsByParentKey","view1","ref1","ref2","ref3","ref4","push","buildTree","parent","views","children","renderWrapper","childViews","children1","setVisibleViews","updated","cur","view2","updateItemSize","_sizeUpdateQueue","changed","startScrolling","endScrolling","scrollToItem","options","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","offset1","then","clear","_processTransactionQueue","action","_startTransaction","_nextTransaction","_endTransaction","_transactionQueue","next","shift","_performTransaction","_getContentRect","_setupTransactionAnimations","key3","layoutInfo1","key4","WeakMap","_transitionDuration","$fc0b13b484ac1194$export$1505db82fe357e65","opts","$8D3nr$useState","isAnimating","setAnimating","isScrolling","setScrolling","$8D3nr$useMemo","onVisibleRectChange","$8D3nr$useLayoutEffect","$8D3nr$useEffect","$8D3nr$useCallback"],"sources":["/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Layout.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/LayoutInfo.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Point.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Rect.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Size.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/ReusableView.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/tween.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/utils.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/OverscanManager.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Transaction.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Virtualizer.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/useVirtualizerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    virtualizer,\n    visibleViews,\n    setVisibleRect: useCallback((rect) => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling: useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}