{"ast":null,"code":"import $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ($6nfFC$getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    $6nfFC$runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) $6nfFC$focusWithoutScrolling(element);\n    });\n  } else $6nfFC$focusWithoutScrolling(element);\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';\n  }\n  return isVisible;\n}\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);\n}\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/$6nfFC$react.createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nlet $9bf71ea28793e738$var$scopes = new Map();\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = $6nfFC$useRef();\n  let endRef = $6nfFC$useRef();\n  let scopeRef = $6nfFC$useRef([]);\n  let ctx = $6nfFC$useContext($9bf71ea28793e738$var$FocusContext);\n  let parentScope = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef;\n  $6nfFC$useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n  $6nfFC$useLayoutEffect(() => {\n    $9bf71ea28793e738$var$scopes.set(scopeRef, parentScope);\n    return () => {\n      // Restore the active scope on unmount if this scope or a descendant scope is active.\n      // Parent effect cleanups run before children, so we need to check if the\n      // parent scope actually still exists before restoring the active scope to it.\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$var$scopes.has(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$var$scopes.delete(scopeRef);\n    };\n  }, [scopeRef, parentScope]);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);\n  return /*#__PURE__*/$6nfFC$react.createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: {\n      scopeRef: scopeRef,\n      focusManager: focusManager\n    }\n  }, /*#__PURE__*/$6nfFC$react.createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/$6nfFC$react.createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var ref;\n  return (ref = $6nfFC$useContext($9bf71ea28793e738$var$FocusContext)) === null || ref === void 0 ? void 0 : ref.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = $6nfFC$useRef();\n  let raf = $6nfFC$useRef(null);\n  $6nfFC$useLayoutEffect(() => {\n    let scope1 = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== $9bf71ea28793e738$var$activeScope) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if (scopeRef === $9bf71ea28793e738$var$activeScope) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope1.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope1.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope1.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope1.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // eslint-disable-next-line arrow-body-style\n  $6nfFC$useEffect(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  for (let scope of $9bf71ea28793e738$var$scopes.keys()) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, scope.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let s of $9bf71ea28793e738$var$scopes.keys()) {\n    if ((s === scope || $9bf71ea28793e738$var$isAncestorScope(scope, s)) && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  let parent = $9bf71ea28793e738$var$scopes.get(scope);\n  if (!parent) return false;\n  if (parent === ancestor) return true;\n  return $9bf71ea28793e738$var$isAncestorScope(ancestor, parent);\n}\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    $6a99195332edec8b$export$80f3e147d781571c(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err1) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: true\n  }, scope);\n  walker.currentNode = sentinel;\n  $9bf71ea28793e738$var$focusElement(walker.nextNode());\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = $6nfFC$react.useRef(autoFocus);\n  $6nfFC$useEffect(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, []);\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = $6nfFC$useRef(typeof document !== 'undefined' ? document.activeElement : null);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  $6nfFC$useLayoutEffect(() => {\n    let nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) nodeToRestore = null;\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) document.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener('keydown', onKeyDown, true);\n      if (restoreFocus && nodeToRestore && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current)) requestAnimationFrame(() => {\n        // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n        if (document.body.contains(nodeToRestore) && document.activeElement === document.body) $9bf71ea28793e738$var$focusElement(nodeToRestore);\n      });\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var ref;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = $6nfFC$useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || $6nfFC$isFocusVisible()\n  });\n  let [isFocused1, setFocused] = $6nfFC$useState(false);\n  let [isFocusVisibleState, setFocusVisible] = $6nfFC$useState(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = $6nfFC$useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = $6nfFC$useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  $6nfFC$useFocusVisibleListener(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = $6nfFC$useFocus({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = $6nfFC$useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused1,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);\n  let child = $6nfFC$react.Children.only(children);\n  return /*#__PURE__*/$6nfFC$react.cloneElement(child, $6nfFC$mergeProps(child.props, {\n    ...focusProps,\n    className: $6nfFC$clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/$6nfFC$react.createContext(null);\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = $6nfFC$useContext($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  $6nfFC$useSyncRef(context, ref);\n  // eslint-disable-next-line\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = {\n    ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/$6nfFC$react.createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/$6nfFC$react.forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = $6nfFC$useFocus(props);\n  let {\n    keyboardProps: keyboardProps\n  } = $6nfFC$useKeyboard(props);\n  let interactions = $6nfFC$mergeProps(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = $6nfFC$useRef(props.autoFocus);\n  $6nfFC$useEffect(() => {\n    if (autoFocusRef.current && domRef.current) $6a99195332edec8b$export$80f3e147d781571c(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: $6nfFC$mergeProps({\n      ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely };","map":{"version":3,"mappings":"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","names":["$6a99195332edec8b$export$80f3e147d781571c","element","$6nfFC$getInteractionModality","lastFocusedElement","document","activeElement","$6nfFC$runAfterTransition","contains","$6nfFC$focusWithoutScrolling","$645f2e67b85a24c9$var$isStyleVisible","HTMLElement","SVGElement","display","visibility","style","isVisible","getComputedStyle","ownerDocument","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isAttributeVisible","childElement","hasAttribute","nodeName","$645f2e67b85a24c9$export$e989c0fffaa6b27a","parentElement","$9bf71ea28793e738$var$FocusContext","$6nfFC$react","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$var$scopes","Map","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","$6nfFC$useRef","endRef","scopeRef","ctx","$6nfFC$useContext","parentScope","$6nfFC$useLayoutEffect","node","current","nextSibling","nodes","push","set","$9bf71ea28793e738$var$isAncestorScope","has","delete","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","Provider","value","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","focusNext","opts","scope","from","tabbable","wrap","accept","sentinel","previousElementSibling","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","$9bf71ea28793e738$var$getScopeRoot","currentNode","$9bf71ea28793e738$var$isElementInScope","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","focusedNode","raf","scope1","cancelAnimationFrame","onKeyDown","e","key","altKey","ctrlKey","metaKey","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","addEventListener","forEach","removeEventListener","$6nfFC$useEffect","$9bf71ea28793e738$var$isElementInAnyScope","keys","some","s","ancestor","parent","get","scroll","err","err1","autoFocusRef","useRef","nodeToRestoreRef","nodeToRestore","body","stopPropagation","blur","root","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","last","lastChild","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","$6nfFC$isFocusVisible","isFocused1","setFocused","$6nfFC$useState","isFocusVisibleState","setFocusVisible","updateState","$6nfFC$useCallback","onFocusChange","$6nfFC$useFocusVisibleListener","focusProps","$6nfFC$useFocus","isDisabled","focusWithinProps","$6nfFC$useFocusWithin","onFocusWithinChange","$907718708eab68af$export$1a38b4ad7f578e1d","focusClass","focusRingClass","child","Children","only","cloneElement","$6nfFC$mergeProps","className","$6nfFC$clsx","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$var$useFocusableContext","context","$6nfFC$useSyncRef","_","otherProps","$e6afbd83fe6ebbd2$var$FocusableProvider","$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5","forwardRef","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","$6nfFC$useKeyboard","interactions","domProps","interactionProps","focusableProps","tabIndex","excludeFromTabOrder","undefined"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx","/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusRing.tsx","/home/kaytee/Desktop/crux/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// import {FocusScope, useFocusScope} from 'react-events/focus-scope';\n// export {FocusScope};\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  scopeRef: ScopeRef,\n  focusManager: FocusManager\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\nlet scopes: Map<ScopeRef, ScopeRef | null> = new Map();\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let ctx = useContext(FocusContext);\n  let parentScope = ctx?.scopeRef;\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n\n  useLayoutEffect(() => {\n    scopes.set(scopeRef, parentScope);\n    return () => {\n      // Restore the active scope on unmount if this scope or a descendant scope is active.\n      // Parent effect cleanups run before children, so we need to check if the\n      // parent scope actually still exists before restoring the active scope to it.\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || scopes.has(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      scopes.delete(scopeRef);\n    };\n  }, [scopeRef, parentScope]);\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={{scopeRef, focusManager}}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== activeScope) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (scopeRef === activeScope && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (scopeRef === activeScope) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (scopeRef === activeScope && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  for (let scope of scopes.keys()) {\n    if (isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let s of scopes.keys()) {\n    if ((s === scope || isAncestorScope(scope, s)) && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = scopes.get(scope);\n  if (!parent) {\n    return false;\n  }\n\n  if (parent === ancestor) {\n    return true;\n  }\n\n  return isAncestorScope(ancestor, parent);\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[]) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n  walker.currentNode = sentinel;\n  focusElement(walker.nextNode() as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, []);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && isElementInScope(document.activeElement, scopeRef.current)) {\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.body.contains(nodeToRestore) && document.activeElement === document.body) {\n            focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}