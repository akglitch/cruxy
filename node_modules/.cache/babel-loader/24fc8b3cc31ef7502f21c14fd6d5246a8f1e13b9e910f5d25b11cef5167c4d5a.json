{"ast":null,"code":"import { useControlledState as $fQ2SF$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $fQ2SF$useMemo, useState as $fQ2SF$useState } from \"react\";\nlet $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);\nlet $a54cdc5c1942b639$var$i = 0;\nfunction $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = $fQ2SF$useMemo(() => props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [props.name]);\n  let [selectedValue, setSelected] = $fQ2SF$useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = $fQ2SF$useState(null);\n  let setSelectedValue = value => {\n    if (!props.isReadOnly && !props.isDisabled) setSelected(value);\n  };\n  return {\n    name: name,\n    selectedValue: selectedValue,\n    setSelectedValue: setSelectedValue,\n    lastFocusedValue: lastFocusedValue,\n    setLastFocusedValue: setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\nexport { $a54cdc5c1942b639$export$bca9d026f8e704eb as useRadioGroupState };","map":{"version":3,"mappings":";;AA2CA,IAAIA,8BAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,KAAK,WAAW;AACrD,IAAIC,uBAAC,GAAG,CAAC;SAMOC,yCAAkB,CAACC,KAAsB,EAAoB;EAC3E;EACA,IAAIC,IAAI,GAAGC,cAAO,OAAOF,KAAK,CAACC,IAAI,IAAK,eAAcP,8BAAS,IAAC,EAAII,uBAAC,IAAI,CAACE,KAAK,CAACC,IAAI,CAAC;EACrF,IAAG,CAAEE,aAAa,EAAEC,WAAW,IAAIC,yBAAkB,CAACL,KAAK,CAACM,KAAK,EAAEN,KAAK,CAACO,YAAY,EAAEP,KAAK,CAACQ,QAAQ;EACrG,IAAG,CAAEC,gBAAgB,EAAEC,mBAAmB,IAAIC,eAAQ,CAAC,IAAI;EAE3D,IAAIC,gBAAgB,GAAIN,KAAK,IAAK;IAChC,IAAE,CAAGN,KAAK,CAACa,UAAU,KAAKb,KAAK,CAACc,UAAU,EACxCV,WAAW,CAACE,KAAK;EAErB,CAAC;EAED,OAAO;UACLL,IAAI;mBACJE,aAAa;sBACbS,gBAAgB;sBAChBH,gBAAgB;yBAChBC,mBAAmB;IACnBI,UAAU,EAAEd,KAAK,CAACc,UAAU,IAAI,KAAK;IACrCD,UAAU,EAAEb,KAAK,CAACa,UAAU,IAAI;EAClC,CAAC;AACH","names":["$a54cdc5c1942b639$var$instance","Math","round","random","$a54cdc5c1942b639$var$i","$a54cdc5c1942b639$export$bca9d026f8e704eb","props","name","$fQ2SF$useMemo","selectedValue","setSelected","$fQ2SF$useControlledState","value","defaultValue","onChange","lastFocusedValue","setLastFocusedValue","$fQ2SF$useState","setSelectedValue","isReadOnly","isDisabled"],"sources":["/home/kaytee/Desktop/cruxy/node_modules/@react-stately/radio/dist/packages/@react-stately/radio/src/useRadioGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}