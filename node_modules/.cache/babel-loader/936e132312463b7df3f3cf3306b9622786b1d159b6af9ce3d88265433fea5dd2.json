{"ast":null,"code":"import { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  let {\n    elementType = 'button',\n    isDisabled: isDisabled,\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    preventFocusOnPress:\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    allowFocusWhenDisabled:\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === 'a' && isDisabled ? undefined : href,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $cE0pI$usePress({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = $cE0pI$useFocusable(props, ref);\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  let buttonProps = $cE0pI$mergeProps(focusableProps, pressProps, $cE0pI$filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: e => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  const {\n    isSelected: isSelected\n  } = state;\n  const {\n    isPressed: isPressed,\n    buttonProps: buttonProps\n  } = $701a24aa0da5b062$export$ea18c227d4417cc3({\n    ...props,\n    onPress: $cE0pI$chain(state.toggle, props.onPress)\n  }, ref);\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"mappings":"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","names":["$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","deprecatedOnClick","href","target","rel","type","additionalProps","disabled","role","tabIndex","undefined","pressProps","isPressed","$cE0pI$usePress","focusableProps","$cE0pI$useFocusable","buttonProps","$cE0pI$mergeProps","$cE0pI$filterDOMProps","labelable","e","console","warn","$55f54f7887471b58$export$51e84d46ca0bc451","state","isSelected","$cE0pI$chain","toggle"],"sources":["/home/kaytee/Desktop/cruxy/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useButton.ts","/home/kaytee/Desktop/cruxy/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}