{"ast":null,"code":"function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.era, date.year, date.month, date.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.year, date.month, date.day);\n}\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === 'BC' ? 1 - year : year;\n}\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n  return [era, year];\n}\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, month, day);\n  }\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date) {\n    return 12;\n  }\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date) {\n    return 9999;\n  }\n  getEras() {\n    return ['BC', 'AD'];\n  }\n  isInverseEra(date) {\n    return date.era === 'BC';\n  }\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n  constructor() {\n    this.identifier = 'gregory';\n  }\n}\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = $11d87f3f76e88657$export$5107c82f94518f5c(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') return 0;\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone: timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === 'compatible') {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case 'compatible':\n    case 'earlier':\n      return valid[0];\n    case 'later':\n      return valid[valid.length - 1];\n    case 'reject':\n      throw new RangeError('Multiple possible absolute times found');\n  }\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n    minute = 0,\n    second = 0,\n    millisecond = 0;\n  if ('timeZone' in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if ('hour' in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(copy);\n  return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = 'hour' in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    var _calendar, ref;\n    let isInverseEra = (ref = (_calendar = mutableDate.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _calendar, ref;\n  if ((ref = (_calendar = date.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, date)) years = -years;\n  date.year += years;\n}\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n  for (let key in duration) if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];\n  return inverseDuration;\n}\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n  switch (field) {\n    case 'era':\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex];\n        // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n    case 'year':\n      var _calendar, ref;\n      if ((ref = (_calendar = mutable.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutable)) amount = -amount;\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n    case 'month':\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case 'day':\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n  switch (field) {\n    case 'hour':\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n    case 'minute':\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case 'second':\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n  return mutable;\n}\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  let round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n  return value;\n}\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n  } else\n    // Otherwise, preserve the offset of the original date.\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);\n}\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour':\n      {\n        let min = 0;\n        let max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n        let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n        let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let minAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let maxAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day).pop();\n        // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n        let ms1 = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms1 / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms1 % $735220c2d4774dd3$var$ONE_HOUR;\n        ms1 = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;\n        // Now compute the new timezone offset, and convert the absolute time back to local time.\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);\n        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n      }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n}\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 time string: ' + value);\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  let ms;\n  if (m[8]) {\n    var ref;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n    // Validate offset against parsed date.\n    let absolutes = $11d87f3f76e88657$export$136f38efe7caf549(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c($11d87f3f76e88657$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, date.timeZone);\n}\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var ref;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n}\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === 'object' ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  let era;\n  if (typeof args[0] === 'string') era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString() {\n    return $fae977aafc393c5c$export$60dfd74aa96791bd(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n  }\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n    // If that behavior is desired, use the AnyCalendarDate interface instead.\n    _type.set(this, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n}\nvar _type = new WeakMap();\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration) {\n    return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration) {\n    return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return $fae977aafc393c5c$export$f59dee82248f5ad4(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b);\n  }\n  constructor() {\n    let hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type1.set(this, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    $735220c2d4774dd3$export$7555de1e070510cb(this);\n  }\n}\nvar _type1 = new WeakMap();\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n      default:\n        return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone, disambiguation) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString() {\n    return $fae977aafc393c5c$export$4223de14708adc63(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n    if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b));\n    return res;\n  }\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type2.set(this, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n}\nvar _type2 = new WeakMap();\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration) {\n    return $735220c2d4774dd3$export$96b1d28349274637(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration) {\n    return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields, disambiguation) {\n    return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return $11d87f3f76e88657$export$83aac07b4c37b25(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();\n  }\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type3.set(this, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n}\nvar _type3 = new WeakMap();\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(_ref => {\n    let [year, month, day] = _ref;\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error('Unknown era: ' + date.era);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);\n}\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    }\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n    }\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n      if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n    }\n  }\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null)\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n  constructor() {\n    super(...arguments);\n    this.identifier = 'japanese';\n  }\n}\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(gregorianDate.era, gregorianDate.year);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n  getEras() {\n    return ['BE'];\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n  balanceDate() {}\n  constructor() {\n    super(...arguments);\n    this.identifier = 'buddhist';\n  }\n}\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return ['minguo', y];else return ['before_minguo', 1 - y];\n}\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, date.month, date.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n  isInverseEra(date) {\n    return date.era === 'before_minguo';\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n  getYearsInEra(date) {\n    return date.era === 'before_minguo' ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  }\n  constructor() {\n    super(...arguments);\n    this.identifier // Republic of China\n    = 'roc';\n  }\n}\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;\n}\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n  getEras() {\n    return ['AP'];\n  }\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n  constructor() {\n    this.identifier = 'persian';\n  }\n}\n\n// Starts in 78 AD,\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n    // Year in Saka era\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, 1, 1);\n    let leapMonth;\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n    let indianMonth;\n    let indianDay;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);\n  }\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let leapMonth;\n    let jd;\n    if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) {\n      leapMonth = 31;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 22);\n    }\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n  getDaysInMonth(date) {\n    if (date.month === 1 && $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n  getYearsInEra() {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n  getEras() {\n    return ['saka'];\n  }\n  balanceDate() {}\n  constructor() {\n    super(...arguments);\n    this.identifier = 'indian';\n  }\n}\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n  getYearsInEra() {\n    // 9999 gregorian\n    return 9665;\n  }\n  getEras() {\n    return ['AH'];\n  }\n  constructor() {\n    this.identifier = 'islamic-civil';\n  }\n}\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n  constructor() {\n    super(...arguments);\n    this.identifier = 'islamic-tbla';\n  }\n}\n// Generated by scripts/generate-umalqura.js\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 1 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n  return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n  constructor() {\n    super();\n    this.identifier = 'islamic-umalqura';\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n}\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ($2b4dce13dd5a17fa$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n    case 354:\n      return 1;\n    // normal\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year);\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) return yearType === 2 ? 30 : 29;\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) return yearType === 0 ? 29 : 30;\n  // Adar I only exists in leap years\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n  getYearsInEra() {\n    // 6239 gregorian\n    return 9999;\n  }\n  getEras() {\n    return ['AM'];\n  }\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n  constructor() {\n    this.identifier = 'hebrew';\n  }\n}\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1) // number of days from months (1 based)\n  + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0)\n    // not intercalary month\n    return 30;else\n    // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear() {\n    return 13;\n  }\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n  getYearsInEra(date) {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n  getEras() {\n    return ['AA', 'AM'];\n  }\n  constructor() {\n    this.identifier = 'ethiopic';\n  }\n}\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, 'AA', year, month, day);\n  }\n  getEras() {\n    return ['AA'];\n  }\n  getYearsInEra() {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n  constructor() {\n    super(...arguments);\n    this.identifier // also known as 'ethiopic-amete-alem' in ICU\n    = 'ethioaa';\n  }\n}\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n  isInverseEra(date) {\n    return date.era === 'BCE';\n  }\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n  getYearsInEra(date) {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n  constructor() {\n    super(...arguments);\n    this.identifier = 'coptic';\n  }\n}\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case 'buddhist':\n      return new $8d73d47422ca7302$export$42d20a78301dee44();\n    case 'ethiopic':\n      return new $b956b2d7a6cf451f$export$26ba6eab5e20cd7d();\n    case 'ethioaa':\n      return new $b956b2d7a6cf451f$export$d72e0c37005a4914();\n    case 'coptic':\n      return new $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1();\n    case 'hebrew':\n      return new $7c5f6fbf42389787$export$ca405048b8fb5af();\n    case 'indian':\n      return new $82c358003bdda0a8$export$39f31c639fa15726();\n    case 'islamic-civil':\n      return new $f2f3e0e3a817edbd$export$2066795aadd37bfc();\n    case 'islamic-tbla':\n      return new $f2f3e0e3a817edbd$export$37f0887f2f9d22f7();\n    case 'islamic-umalqura':\n      return new $f2f3e0e3a817edbd$export$5baab4758c231076();\n    case 'japanese':\n      return new $62225008020f0a13$export$b746ab2b60cdffbf();\n    case 'persian':\n      return new $f3ed2e4472ae7e25$export$37fccdbfd14c5939();\n    case 'roc':\n      return new $5f31bd6f0c8940b2$export$65e01080afcb0799();\n    case 'gregory':\n    default:\n      return new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function')\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date');\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function')\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date');\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({\n      ...p,\n      source: 'startRange'\n    })), {\n      type: 'literal',\n      value: ' – ',\n      source: 'shared'\n    }, ...endParts.map(p => ({\n      ...p,\n      source: 'endRange'\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') resolvedOptions.calendar = 'ethioaa';\n    return resolvedOptions;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n}\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {}\n};\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = {\n      ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === '24';\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n    hour: 'numeric',\n    hour12: false\n  }).resolvedOptions().hourCycle === 'h12';\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined;\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n  if (min === 0 && max === 23) return 'h23';\n  if (min === 24 && max === 23) return 'h24';\n  if (min === 0 && max === 11) return 'h11';\n  if (min === 12 && max === 11) return 'h12';\n  throw new Error('Unexpected hour cycle result');\n}\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"mappings":"SAkBgBA,yCAAG,CAACC,MAAc,EAAEC,SAAiB,EAAU;EAC7D,OAAOD,MAAM,GAAGC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAGC,SAAS;AAC3D;SAEgBG,yCAAI,CAACC,IAAkB,EAAyB;EAC9D,IAAIA,IAAI,CAACC,GAAG,EACV,OAAO,IAAIC,yCAAY,CAACF,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACC,GAAG,EAAED,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,GAAG,OAEhF,OAAO,IAAIJ,yCAAY,CAACF,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,GAAG;AAE1E;SAEgBC,yCAAY,CAACP,IAAsB,EAA6B;EAC9E,IAAIA,IAAI,CAACC,GAAG,EACV,OAAO,IAAIO,yCAAgB,CAACR,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACC,GAAG,EAAED,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACS,IAAI,EAAET,IAAI,CAACU,MAAM,EAAEV,IAAI,CAACW,MAAM,EAAEX,IAAI,CAACY,WAAW,OAE3I,OAAO,IAAIJ,yCAAgB,CAACR,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACS,IAAI,EAAET,IAAI,CAACU,MAAM,EAAEV,IAAI,CAACW,MAAM;AAEnH;ACjBA,MAAME,2BAAK,GAAG,OAAO,CAAE,CAAwB;SAC/BC,yCAAoB,CAACb,GAAW,EAAEG,IAAY,EAAEC,KAAa,EAAEC,GAAW,EAAU;EAClGF,IAAI,GAAGW,yCAAe,CAACd,GAAG,EAAEG,IAAI;EAEhC,IAAIY,EAAE,GAAGZ,IAAI,GAAG,CAAC;EACjB,IAAIa,WAAW,GAAG,EAAE;EACpB,IAAIZ,KAAK,IAAI,CAAC,EACZY,WAAW,GAAG,CAAC,MACV,IAAIC,yCAAU,CAACd,IAAI,GACxBa,WAAW,GAAG,EAAE;EAGlB,OACEJ,2BAAK,GACL,CAAC,GACD,GAAG,GAAGG,EAAE,GACRnB,IAAI,CAACC,KAAK,CAACkB,EAAE,GAAG,CAAC,IACjBnB,IAAI,CAACC,KAAK,CAACkB,EAAE,GAAG,GAAG,IACnBnB,IAAI,CAACC,KAAK,CAACkB,EAAE,GAAG,GAAG,IACnBnB,IAAI,CAACC,KAAK,EAAE,GAAG,GAAGO,KAAK,GAAG,GAAG,IAAI,EAAE,GAAGY,WAAW,GAAGX,GAAG;AAE3D;SAEgBY,yCAAU,CAACd,IAAY,EAAW;EAChD,OAAOA,IAAI,GAAG,CAAC,KAAK,CAAC,KAAKA,IAAI,GAAG,GAAG,KAAK,CAAC,IAAIA,IAAI,GAAG,GAAG,KAAK,CAAC;AAChE;SAEgBW,yCAAe,CAACd,GAAW,EAAEG,IAAY,EAAU;EACjE,OAAOH,GAAG,KAAK,IAAI,GAAG,CAAC,GAAGG,IAAI,GAAGA,IAAI;AACvC;SAEgBe,yCAAgB,CAACf,IAAY,EAAoB;EAC/D,IAAIH,GAAG,GAAG,IAAI;EACd,IAAIG,IAAI,IAAI,CAAC,EAAE;IACbH,GAAG,GAAG,IAAI;IACVG,IAAI,GAAG,CAAC,GAAGA,IAAI;EACjB;EAEA,OAAO,CAACH,GAAG,EAAEG,IAAI,CAAC;AACpB;AAEA,MAAMgB,iCAAW,GAAG;EAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC1DC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAC3D,CAAC;MAMYC,yCAAiB;EAG5BC,aAAa,CAACC,EAAU,EAAgB;IACtC,IAAIC,GAAG,GAAGD,EAAE;IACZ,IAAIE,MAAM,GAAGD,GAAG,GAAGb,2BAAK;IACxB,IAAIe,UAAU,GAAG/B,IAAI,CAACC,KAAK,CAAC6B,MAAM,GAAG,MAAM;IAC3C,IAAIE,GAAG,GAAGnC,yCAAG,CAACiC,MAAM,EAAE,MAAM;IAC5B,IAAIG,IAAI,GAAGjC,IAAI,CAACC,KAAK,CAAC+B,GAAG,GAAG,KAAK;IACjC,IAAIE,KAAK,GAAGrC,yCAAG,CAACmC,GAAG,EAAE,KAAK;IAC1B,IAAIG,IAAI,GAAGnC,IAAI,CAACC,KAAK,CAACiC,KAAK,GAAG,IAAI;IAClC,IAAIE,KAAK,GAAGvC,yCAAG,CAACqC,KAAK,EAAE,IAAI;IAC3B,IAAIG,MAAM,GAAGrC,IAAI,CAACC,KAAK,CAACmC,KAAK,GAAG,GAAG;IAEnC,IAAIE,YAAY,GAAGP,UAAU,GAAG,GAAG,GAAGE,IAAI,GAAG,GAAG,GAAGE,IAAI,GAAG,CAAC,GAAGE,MAAM,IAAIJ,IAAI,KAAK,CAAC,IAAII,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IAC1G,IAAG,CAAEjC,GAAG,EAAEG,IAAI,IAAIe,yCAAgB,CAACgB,YAAY;IAC/C,IAAIC,OAAO,GAAGV,GAAG,GAAGZ,yCAAoB,CAACb,GAAG,EAAEG,IAAI,EAAE,CAAC,EAAE,CAAC;IACxD,IAAIiC,OAAO,GAAG,CAAC;IACf,IAAIX,GAAG,GAAGZ,yCAAoB,CAACb,GAAG,EAAEG,IAAI,EAAE,CAAC,EAAE,CAAC,GAC5CiC,OAAO,GAAG,CAAC,MACN,IAAInB,yCAAU,CAACd,IAAI,GACxBiC,OAAO,GAAG,CAAC;IAEb,IAAIhC,KAAK,GAAGR,IAAI,CAACC,KAAK,GAAGsC,OAAO,GAAGC,OAAO,IAAI,EAAE,GAAG,GAAG,IAAI,GAAG;IAC7D,IAAI/B,GAAG,GAAGoB,GAAG,GAAGZ,yCAAoB,CAACb,GAAG,EAAEG,IAAI,EAAEC,KAAK,EAAE,CAAC,IAAI,CAAC;IAE7D,OAAO,IAAIH,yCAAY,CAACD,GAAG,EAAEG,IAAI,EAAEC,KAAK,EAAEC,GAAG;EAC/C;EAEAgC,WAAW,CAACtC,IAAqB,EAAU;IACzC,OAAOc,yCAAoB,CAACd,IAAI,CAACC,GAAG,EAAED,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,KAAK,EAAEL,IAAI,CAACM,GAAG;EACvE;EAEAiC,cAAc,CAACvC,IAAqB,EAAU;IAC5C,OAAOoB,iCAAW,CAACF,yCAAU,CAAClB,IAAI,CAACI,IAAI,IAAI,UAAU,GAAG,UAAU,EAAEJ,IAAI,CAACK,KAAK,GAAG,CAAC;EACpF;EAEA;EACAmC,eAAe,CAACxC,IAAqB,EAAU;IAC7C,OAAO,EAAE;EACX;EAEAyC,aAAa,CAACzC,IAAqB,EAAU;IAC3C,OAAOkB,yCAAU,CAAClB,IAAI,CAACI,IAAI,IAAI,GAAG,GAAG,GAAG;EAC1C;EAEA;EACAsC,aAAa,CAAC1C,IAAqB,EAAU;IAC3C,OAAO,IAAI;EACb;EAEA2C,OAAO,GAAG;IACR,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;EACrB;EAEAC,YAAY,CAAC5C,IAAqB,EAAW;IAC3C,OAAOA,IAAI,CAACC,GAAG,KAAK,IAAI;EAC1B;EAEA4C,WAAW,CAAC7C,IAA8B,EAAE;IAC1C,IAAIA,IAAI,CAACI,IAAI,IAAI,CAAC,EAAE;MAClBJ,IAAI,CAACC,GAAG,GAAGD,IAAI,CAACC,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;MAC1CD,IAAI,CAACI,IAAI,GAAG,CAAC,GAAGJ,IAAI,CAACI,IAAI;IAC3B;EACF;;IAhEK,IAiEN,CAhEC0C,UAAU,GAAG,SAAS;;;ACxDjB,MAAMC,yCAAa,GAAG;EAC3B,KAAK,EAAE,CAAC;EACRC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,EAAE,EA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","names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","$35ea8db9cb2ccb90$export$99faa760c7908e4f","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","toJulianDay","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","isInverseEra","balanceDate","identifier","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AT","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$35ea8db9cb2ccb90$export$d3b7288e7994edea","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","$35ea8db9cb2ccb90$export$680ea196effce5f","calendarDate","copy","$735220c2d4774dd3$export$c4e2ecac49351ef2","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","maxYear","_calendar","ref","call","maxMonth","monthsInYear","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","ms1","remainder","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","cycle","toDate","toString","_type","_type1","_type2","toAbsoluteString","toISOString","_type3","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","startMonth","startDay","cur","next","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","startDays","endDays","d","yearLength","monthLength","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$getCachedDateFormatter","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","replace","parseInt","find"],"sources":["/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/utils.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/GregorianCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/weekStartData.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/queries.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/conversion.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/manipulation.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/string.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/CalendarDate.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/PersianCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/IndianCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/IslamicCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/HebrewCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/createCalendar.ts","/home/kaytee/Desktop/crux/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in seconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}