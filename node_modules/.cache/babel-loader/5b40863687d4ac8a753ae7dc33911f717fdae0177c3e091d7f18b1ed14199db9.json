{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring';\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement)\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute('style') === '') target.removeAttribute('style');\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n      },\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $bx7SL$isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ($bx7SL$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $bx7SL$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') &&\n  // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit';\n  return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child,\n  // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n  isPropagationStopped() {\n    return false;\n  }\n  persist() {}\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur;\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  $bx7SL$useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  // This function is called during a React onFocus event.\n  return $bx7SL$useCallback(e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e1.target;\n      let onBlurHandler = e => {\n        var\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          _current, ref;\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($bx7SL$isVirtualClick(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return;\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  });\n  let onBlur = $bx7SL$useCallback(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = $bx7SL$useCallback(e => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps = {};\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    };\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n  return ref.current && !ref.current.contains(event.target);\n}\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return;\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({\n          ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({\n            ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold);\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({\n        ...e,\n        type: 'longpressend'\n      });\n    }\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":"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","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","ref","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPress1","onPressChange","onPressChange1","onPressStart","onPressStart1","onPressEnd","onPressEnd1","onPressUp","onPressUp1","isDisabled","isDisabled1","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","$bx7SL$useRef","current","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","pointerType","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","state","triggerPressStart","originalEvent","type","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","stopPropagation","repeat","onKeyUp","$f6c31cce2adf654f$var$isHTMLAnchorLink","onClick","button","$bx7SL$isVirtualClick","$bx7SL$focusWithoutScrolling","click","PointerEvent","onPointerDown","$bx7SL$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","event","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","defaultPrevented","isPropagationStopped","persist","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","$bx7SL$useLayoutEffect","disconnect","$bx7SL$useCallback","e1","HTMLSelectElement","onBlurHandler","_current","disabled","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","undefined","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverEnd1","triggerHoverStart","onPointerEnter","onPointerLeave","hoverProps1","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps1","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/Pressable.tsx","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/PressResponder.tsx","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocus.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusWithin.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useInteractOutside.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/createEventHandler.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useKeyboard.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useMove.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useScrollWheel.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\nexport interface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}