{"ast":null,"code":"import { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\nimport { usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return $eCAIO$isAppleDevice() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ($eCAIO$isMac()) return e.metaKey;\n  return e.ctrlKey;\n}\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    selectionManager: selectionManager,\n    onTypeSelect: onTypeSelect\n  } = options;\n  let state = $eCAIO$useRef({\n    search: '',\n    timeout: null\n  }).current;\n  let onKeyDown = e => {\n    let character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) e.stopPropagation();\n    }\n    state.search += character;\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    // If no key found, search from the top.\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return '';\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {\n    direction: direction\n  } = $eCAIO$useLocale();\n  let onKeyDown = e => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target)) return;\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !$feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var ref4, ref1;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var ref2, ref3;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(firstKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(lastKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if ($feb5ffebff200149$export$16792effe837dba3(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = $eCAIO$getFocusableTreeWalker(ref.current, {\n              tabbable: true\n            });\n            let next;\n            let last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) $eCAIO$focusWithoutScrolling(next);\n          }\n          break;\n        }\n    }\n  };\n  // Store the scroll position so we can restore it later.\n  let scrollPos = $eCAIO$useRef({\n    top: 0,\n    left: 0\n  });\n  $eCAIO$useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget;\n      var _lastSelectedKey, _firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        $eCAIO$focusWithoutScrolling(element);\n        $eCAIO$scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  const autoFocusRef = $eCAIO$useRef(autoFocus);\n  $eCAIO$useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();\n      if (autoFocus === 'last') focusedKey = delegate.getLastKey();\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) $eCAIO$focusSafely(ref.current);\n    }\n    autoFocusRef.current = false;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  $eCAIO$useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) $eCAIO$scrollIntoView(scrollRef.current, element);\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target)\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = $fb3050f43d946246$export$e32c88dfddc6e1d8({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = $eCAIO$mergeProps(typeSelectProps, handlers);\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex: tabIndex\n    }\n  };\n}\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  let {\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    focus: focus,\n    isDisabled: isDisabled,\n    onAction: onAction,\n    allowsDifferentPressOrigin: allowsDifferentPressOrigin\n  } = options;\n  let onSelect = e => {\n    if (e.pointerType === 'keyboard' && $feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === 'none') return;\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ($feb5ffebff200149$export$16792effe837dba3(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  // Focus the associated DOM node when this item becomes the focusedKey\n  $eCAIO$useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) focus();else $eCAIO$focusSafely(ref.current);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = e => {\n    // Prevent focus going to the body when clicking on a disabled item.\n    e.preventDefault();\n  };\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : manager.isEmpty);\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = $eCAIO$useRef(null);\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = $eCAIO$useRef(false);\n  let hadPrimaryActionOnPressStart = $eCAIO$useRef(false);\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {\n        if (e.pointerType === 'keyboard' && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== 'keyboard') onSelect(e);\n    };else {\n      itemPressProps.onPressUp = e => {\n        if (e.pointerType !== 'keyboard') onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    itemPressProps.onPress = e => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n  if (!isVirtualized) itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $eCAIO$usePress(itemPressProps);\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? e => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {\n    longPressProps: longPressProps\n  } = $eCAIO$useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  return {\n    itemProps: $eCAIO$mergeProps(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';\n}\nclass $2a25aae57d74318e$export$a05409b8bb224a5a {\n  getKeyBelow(key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n  getKeyAbove(key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n  getItem(key) {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n  getKeyPageAbove(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n    return key;\n  }\n  getKeyPageBelow(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n    return key;\n  }\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n      key = this.getKeyBelow(key);\n    }\n    return null;\n  }\n  constructor(collection, disabledKeys, ref, collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n}\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    disabledKeys: disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    isVirtualized: isVirtualized,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = $eCAIO$useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = $eCAIO$useMemo(() => keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  let {\n    collectionProps: collectionProps\n  } = $ae20dd8cbca75726$export$d6daf82dcd84e87c({\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus: selectOnFocus,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation,\n    isVirtualized: isVirtualized,\n    scrollRef: ref\n  });\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"mappings":"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","names":["$feb5ffebff200149$export$d3e3bd3e26688c04","e","$eCAIO$isAppleDevice","altKey","ctrlKey","$feb5ffebff200149$export$16792effe837dba3","$eCAIO$isMac","metaKey","$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$eCAIO$useRef","search","timeout","current","onKeyDown","character","$fb3050f43d946246$var$getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$ae20dd8cbca75726$export$d6daf82dcd84e87c","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","direction","$eCAIO$useLocale","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","ref4","ref1","nextKey","getFirstKey","call","getKeyAbove","ref2","ref3","getLastKey","getKeyLeftOf","getKeyRightOf","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","$eCAIO$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$eCAIO$focusWithoutScrolling","scrollPos","top","left","$eCAIO$useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_lastSelectedKey","_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","$eCAIO$scrollIntoView","onBlur","autoFocusRef","$eCAIO$useEffect","selectedKeys","size","values","value","$eCAIO$focusSafely","handlers","onMouseDown","$eCAIO$mergeProps","tabIndex","collectionProps","$880e95eb8b93ba9a$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","allowsDifferentPressOrigin","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","modality","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","pressProps","isPressed","$eCAIO$usePress","onDoubleClick","undefined","longPressProps","$eCAIO$useLongPress","onLongPress","setSelectionBehavior","onDragStartCapture","event","window","code","$2a25aae57d74318e$export$a05409b8bb224a5a","collection","getKeyAfter","item","getItem","type","disabledKeys","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","collator","substring","textValue","slice","compare","$982254629710d113$export$b95089534ab7c1fd","props","$eCAIO$useCollator","usage","sensitivity","disabledBehavior","$eCAIO$useMemo","Set","listProps"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/utils.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useTypeSelect.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableItem.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/ListKeyboardDelegate.ts","/home/kaytee/Desktop/crux/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}