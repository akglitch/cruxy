{"ast":null,"code":"import { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\nclass $e40ea825a81a3709$export$52baac22726c72bf extends Set {\n  constructor(keys, anchorKey, currentKey) {\n    super(keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (let item of setA) {\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  let {\n    selectionMode = 'none',\n    disallowEmptySelection: disallowEmptySelection,\n    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = $Qsto2$useRef(false);\n  let [, setFocused] = $Qsto2$useState(false);\n  let focusedKeyRef = $Qsto2$useRef(null);\n  let childFocusStrategyRef = $Qsto2$useRef(null);\n  let [, setFocusedKey] = $Qsto2$useState(null);\n  let selectedKeysProp = $Qsto2$useMemo(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = $Qsto2$useMemo(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = $Qsto2$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = $Qsto2$useState(selectionBehaviorProp);\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = $Qsto2$useRef(selectionBehaviorProp);\n  $Qsto2$useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k) {\n      let childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n  get selectedKeys() {\n    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n  isSelected(key) {\n    if (this.state.selectionMode === 'none') return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n  get isEmpty() {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === 'all') return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n  get firstSelectedKey() {\n    let first = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n    }\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n  get lastSelectedKey() {\n    let last = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n    }\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n  extendSelection(toKey) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n    toKey = this.getKey(toKey);\n    let selection;\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n    return [];\n  }\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n    return [];\n  }\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item)\n      // ¯\\_(ツ)_/¯\n      return key;\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) return key;\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n    if (!item || item.type !== 'item') return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n  toggleSelection(key) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n  replaceSelection(key) {\n    if (this.selectionMode === 'none') return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n  setSelectedKeys(keys) {\n    if (this.selectionMode === 'none') return;\n    let selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') break;\n      }\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getSelectAllKeys() {\n    let keys = [];\n    let addKeys = key => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') keys.push(key);\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys([...item.childNodes][0].key);\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n  selectAll() {\n    if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n  select(key, e) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true;\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n    for (let key2 of selectedKeys) {\n      if (!selection.has(key2)) return false;\n    }\n    return true;\n  }\n  canSelectItem(key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n    return true;\n  }\n  isDisabled(key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n}\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","Set","keys","anchorKey","currentKey","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","$Qsto2$useRef","setFocused","$Qsto2$useState","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$Qsto2$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","setSelectedKeys","$Qsto2$useControlledState","onSelectionChange","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","$Qsto2$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","state","key","collection","getItem","getSelectAllKeys","rawSelection","isSelected","getKey","canSelectItem","isEmpty","isSelectAll","_isSelectAll","allKeys","every","firstSelectedKey","first","index","lastSelectedKey","last","extendSelection","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","key2","isDisabled","options","ref"],"sources":["/home/kaytee/Desktop/crux/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/Selection.ts","/home/kaytee/Desktop/crux/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/useMultipleSelectionState.ts","/home/kaytee/Desktop/crux/node_modules/@react-stately/selection/dist/packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}